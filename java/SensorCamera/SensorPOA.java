package SensorCamera;


/**
* SensorCamera/SensorPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from ./idl/camera.idl
* Friday, 29 April 2016 00:01:59 o'clock BST
*/

public abstract class SensorPOA extends org.omg.PortableServer.Servant
 implements SensorCamera.SensorOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("_get_cameraname", new java.lang.Integer (0));
    _methods.put ("_set_cameraname", new java.lang.Integer (1));
    _methods.put ("_get_current_image", new java.lang.Integer (2));
    _methods.put ("_get_image_warning", new java.lang.Integer (3));
    _methods.put ("_set_image_warning", new java.lang.Integer (4));
    _methods.put ("get_image", new java.lang.Integer (5));
    _methods.put ("_get_status", new java.lang.Integer (6));
    _methods.put ("record_image", new java.lang.Integer (7));
    _methods.put ("getstatus", new java.lang.Integer (8));
    _methods.put ("switch_on", new java.lang.Integer (9));
    _methods.put ("switch_off", new java.lang.Integer (10));
    _methods.put ("reset", new java.lang.Integer (11));
    _methods.put ("camera_on", new java.lang.Integer (12));
    _methods.put ("camera_off", new java.lang.Integer (13));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // SensorCamera/Sensor/_get_cameraname
       {
         String $result = null;
         $result = this.cameraname ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 1:  // SensorCamera/Sensor/_set_cameraname
       {
         String newCameraname = in.read_string ();
         this.cameraname (newCameraname);
         out = $rh.createReply();
         break;
       }

       case 2:  // SensorCamera/Sensor/_get_current_image
       {
         SensorCamera.Image $result = null;
         $result = this.current_image ();
         out = $rh.createReply();
         SensorCamera.ImageHelper.write (out, $result);
         break;
       }

       case 3:  // SensorCamera/Sensor/_get_image_warning
       {
         SensorCamera.Warning $result = null;
         $result = this.image_warning ();
         out = $rh.createReply();
         SensorCamera.WarningHelper.write (out, $result);
         break;
       }

       case 4:  // SensorCamera/Sensor/_set_image_warning
       {
         SensorCamera.Warning newImage_warning = SensorCamera.WarningHelper.read (in);
         this.image_warning (newImage_warning);
         out = $rh.createReply();
         break;
       }

       case 5:  // SensorCamera/Sensor/get_image
       {
         SensorCamera.Image $result = null;
         $result = this.get_image ();
         out = $rh.createReply();
         SensorCamera.ImageHelper.write (out, $result);
         break;
       }

       case 6:  // SensorCamera/Sensor/_get_status
       {
         SensorCamera.SensorPackage.Status $result = null;
         $result = this.status ();
         out = $rh.createReply();
         SensorCamera.SensorPackage.StatusHelper.write (out, $result);
         break;
       }

       case 7:  // SensorCamera/Sensor/record_image
       {
         double value = in.read_double ();
         this.record_image (value);
         out = $rh.createReply();
         break;
       }

       case 8:  // SensorCamera/Sensor/getstatus
       {
         String $result = null;
         $result = this.getstatus ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 9:  // SensorCamera/Sensor/switch_on
       {
         this.switch_on ();
         out = $rh.createReply();
         break;
       }

       case 10:  // SensorCamera/Sensor/switch_off
       {
         this.switch_off ();
         out = $rh.createReply();
         break;
       }

       case 11:  // SensorCamera/Sensor/reset
       {
         this.reset ();
         out = $rh.createReply();
         break;
       }

       case 12:  // SensorCamera/Sensor/camera_on
       {
         boolean $result = false;
         $result = this.camera_on ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 13:  // SensorCamera/Sensor/camera_off
       {
         boolean $result = false;
         $result = this.camera_off ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:SensorCamera/Sensor:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public Sensor _this() 
  {
    return SensorHelper.narrow(
    super._this_object());
  }

  public Sensor _this(org.omg.CORBA.ORB orb) 
  {
    return SensorHelper.narrow(
    super._this_object(orb));
  }


} // class SensorPOA
