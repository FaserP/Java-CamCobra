package LocalMonitoringStation;


/**
* LocalMonitoringStation/_LMSStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from ./idl/lms.idl
* Friday, 29 April 2016 00:01:59 o'clock BST
*/

public class _LMSStub extends org.omg.CORBA.portable.ObjectImpl implements LocalMonitoringStation.LMS
{

  public String name ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_name", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return name (        );
            } finally {
                _releaseReply ($in);
            }
  } // name

  public void add_camera (SensorCamera.Sensor aSensor, String aZone)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("add_camera", true);
                SensorCamera.SensorHelper.write ($out, aSensor);
                $out.write_string (aZone);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                add_camera (aSensor, aZone        );
            } finally {
                _releaseReply ($in);
            }
  } // add_camera

  public void record_camera (SensorCamera.Sensor aSensor, String aZone, SensorCamera.Image aReading)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("record_camera", true);
                SensorCamera.SensorHelper.write ($out, aSensor);
                $out.write_string (aZone);
                SensorCamera.ImageHelper.write ($out, aReading);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                record_camera (aSensor, aZone, aReading        );
            } finally {
                _releaseReply ($in);
            }
  } // record_camera

  public void raise_alerts (SensorCamera.Sensor aSensor, String aZone, SensorCamera.Image aReading)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("raise_alerts", true);
                SensorCamera.SensorHelper.write ($out, aSensor);
                $out.write_string (aZone);
                SensorCamera.ImageHelper.write ($out, aReading);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                raise_alerts (aSensor, aZone, aReading        );
            } finally {
                _releaseReply ($in);
            }
  } // raise_alerts

  public String[] get_zones ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_zones", true);
                $in = _invoke ($out);
                String $result[] = LocalMonitoringStation.ZonesHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_zones (        );
            } finally {
                _releaseReply ($in);
            }
  } // get_zones

  public SensorCamera.Sensor[] get_camera (String zone)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_camera", true);
                $out.write_string (zone);
                $in = _invoke ($out);
                SensorCamera.Sensor $result[] = LocalMonitoringStation.SensorsHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_camera (zone        );
            } finally {
                _releaseReply ($in);
            }
  } // get_camera

  public LocalMonitoringStation.Log[] retrieve_logs (String sensor, String zone)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("retrieve_logs", true);
                $out.write_string (sensor);
                $out.write_string (zone);
                $in = _invoke ($out);
                LocalMonitoringStation.Log $result[] = LocalMonitoringStation.LogsHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return retrieve_logs (sensor, zone        );
            } finally {
                _releaseReply ($in);
            }
  } // retrieve_logs

  public LocalMonitoringStation.Alert[] retrieve_alerts (String sensor, String zone)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("retrieve_alerts", true);
                $out.write_string (sensor);
                $out.write_string (zone);
                $in = _invoke ($out);
                LocalMonitoringStation.Alert $result[] = LocalMonitoringStation.AlertsHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return retrieve_alerts (sensor, zone        );
            } finally {
                _releaseReply ($in);
            }
  } // retrieve_alerts

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:LocalMonitoringStation/LMS:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _LMSStub
